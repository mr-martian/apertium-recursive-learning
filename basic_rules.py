#!/usr/bin/python3
from typing import List, Tuple, Optional
import subprocess, tempfile
from objects import *

def read_rules(fname):
    f = open(fname)
    rules = f.read().splitlines()
    f.close()
    pos_tags = set()
    for rule in rules:
        l, r = rule.split(' -> ')
        rl = r.split()
        pos_tags.add(l)
        pos_tags.update(rl)
        Rule(l, rl)
    for tag in pos_tags:
        Pattern(tag)

def align_corpus(sens):
    for i, sn in enumerate(sens.sens):
        print('---------------------')
        al = sn.sl.align_tree_to_flat(sn.tl.children)
        sn.sl.filter_align(al)
        sn.sl.suggest_rules([i], sn.tl.children)
        print(al)
        print(sn.sl)
        print(sn.tl)

if __name__ == '__main__':
    import corpus
    parser = corpus.make_corpus_argparse('generate rtx rules from skelton CFG file')
    parser.add_argument('cfg_rules', help='new-line separated CFG rules, such as generated by rtx-comp -s')
    parser.add_argument('rtx_file', help='file to write generated rules to')
    args = parser.parse_args()
    read_rules(args.cfg_rules)
    generate_rule_file(args.rtx_file)
    sens = corpus.get_corpus(args)
    for sen in sens.sens:
        print(sen.sl)
    print('+++++++++++++++++++++++++++++')
    sens.compile_and_retree(args.rtx_file)
    align_corpus(sens)
